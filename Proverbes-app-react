/*
App React + Tailwind + Supabase
Fonctions :
- Authentification Email
- Lecture de proverbes
- Filtres + recherche
*/

import { useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient('https://eughqgvtuzskdwaajexc.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV1Z2hxZ3Z0dXpza2R3YWFqZXhjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwOTUxMjksImV4cCI6MjA2ODY3MTEyOX0.9QzBOlEbJDBj24MEjQ4SiRWHwD50f6v1UVN1Tsi4BEA
');

export default function App() {
  const [user, setUser] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [proverbes, setProverbes] = useState([]);
  const [search, setSearch] = useState('');
  const [theme, setTheme] = useState('');

  useEffect(() => {
    supabase.auth.getUser().then(({ data: { user } }) => {
      setUser(user);
      if (user) chargerProverbes();
    });
  }, []);

  async function login() {
    const { error, data } = await supabase.auth.signInWithPassword({ email, password });
    if (error) alert(error.message);
    else setUser(data.user);
  }

  async function logout() {
    await supabase.auth.signOut();
    setUser(null);
  }

  async function chargerProverbes() {
    let { data, error } = await supabase.from('proverbes').select('*').order('date_ajout', { ascending: false });
    if (error) console.error(error);
    else setProverbes(data);
  }

  const proverbesFiltres = proverbes.filter(p =>
    (p.texte?.toLowerCase().includes(search.toLowerCase()) ||
     p.explication?.toLowerCase().includes(search.toLowerCase())) &&
    (theme === '' || p.theme_id == theme)
  );

  return (
    <div className="p-4 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold mb-4 text-center">üìú Proverbes Bibliques</h1>

      {!user ? (
        <div className="flex flex-col gap-2 mb-4">
          <input className="border p-2" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)} />
          <input className="border p-2" placeholder="Mot de passe" type="password" value={password} onChange={e => setPassword(e.target.value)} />
          <button className="bg-blue-600 text-white p-2 rounded" onClick={login}>Connexion</button>
        </div>
      ) : (
        <>
          <div className="flex justify-between items-center mb-4">
            <div className="text-sm">Connect√© : {user.email}</div>
            <button className="text-red-600" onClick={logout}>D√©connexion</button>
          </div>

          <div className="flex gap-2 mb-4">
            <input className="border p-2 flex-1" placeholder="Rechercher..." value={search} onChange={e => setSearch(e.target.value)} />
            <select className="border p-2" value={theme} onChange={e => setTheme(e.target.value)}>
              <option value="">Tous les th√®mes</option>
              <option value="1">Sagesse</option>
              <option value="2">Parole</option>
              <option value="3">Travail</option>
            </select>
          </div>

          <div className="space-y-4">
            {proverbesFiltres.map(p => (
              <div key={p.id} className="border-l-4 border-yellow-600 bg-white p-4 shadow rounded">
                <h2 className="font-semibold">{p.texte}</h2>
                <p><strong>Explication :</strong> {p.explication}</p>
                <p><strong>Application :</strong> {p.application}</p>
                <p><strong>Contexte :</strong> {p.contexte}</p>
                <p><strong>Le√ßon :</strong> {p.le√ßon}</p>
                <p className="text-sm italic">{p.reference}</p>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}
